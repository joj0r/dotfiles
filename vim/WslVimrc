" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" From:
" https://devel.tech/snippets/n/vIIMz8vZ/load-vim-source-files-only-if-they-exist/
function! SourceIfExists(file)
  if filereadable(expand(a:file))
      exe 'source' a:file
        endif
        endfunction

        call SourceIfExists("~/.vimrc_local")
	
" Ingore case search
set ignorecase
 

" Hentet fra vimwiki
" Allow buffers to stay open in background
set hidden

" Do not allow arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Tab-size:
set tabstop=2
set shiftwidth=2
"set expandtab (If you want spaces instead of tabs)
set number

" Set backup-directory
let &directory = expand('~/.vimdata/swap//')

set backup
let &backupdir = expand('~/.vimdata/backup//')

set undofile
let &undodir = expand('~/.vimdata/undo//')

if !isdirectory(&undodir) | call mkdir(&undodir, "p") | endif
if !isdirectory(&backupdir) | call mkdir(&backupdir, "p") | endif
if !isdirectory(&directory) | call mkdir(&directory, "p") | endif

" Open links correctly on WSL
let g:netrw_browsex_viewer="cmd.exe /C start"

" Auto-install vim-plug if it is not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" List all the plugins you want to install
call plug#begin('~/.vim/plugged')
	Plug 'ledger/vim-ledger'
			" Wiki and Task
	Plug 'vimwiki/vimwiki'
	Plug 'tools-life/taskwiki'
	Plug 'blindFS/vim-taskwarrior'
	" LSP and autocomplete
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings'
	Plug 'prabirshrestha/asyncomplete.vim'
	Plug 'prabirshrestha/asyncomplete-lsp.vim'
	Plug 'github/copilot.vim'
	" Visual and interaction
	Plug 'christoomey/vim-tmux-navigator'
	Plug 'tomasiser/vim-code-dark'
	Plug 'preservim/nerdtree'
	Plug 'vim-airline/vim-airline'
	" Syntax React
	"Plug 'HerringtonDarkholme/yats.vim'
	"Plug 'maxmellon/vim-jsx-pretty'
	" Syntax Vue
	"Plug 'posva/vim-vue'
	" post install (yarn install | npm install) then load plugin only for
	" editing supported files
	Plug 'prettier/vim-prettier', { 
				\ 'do': 'npm install --frozen-lockfile --production' }
	" Samlepakke med syntax
	Plug 'sheerun/vim-polyglot'
call plug#end()

" Nerdtree remaping
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Vimwiki remaping
nnoremap <C-S-h> :VimwikiVSplitLink<CR>
nnoremap <C-S-j> _VimwikiSplitLink<CR>

" To remove Vim-specific things that nvim does not support
if !has('nvim')
	" Fix mouse in Alacritty (nvim already supports mouse)
	set ttymouse=sgr
	set mouse=a

	" Get the defaults that most users want.
	source $VIMRUNTIME/defaults.vim
endif

" For VimWiki
set nocompatible
filetype plugin on
" Change syntac to markdown and specify extension
let g:vimwiki_list = [{'path': '~/.task/vimwiki/', 
											\ 'syntax': 'markdown', 'ext': '.md' }]
let g:vimwiki_global_ext = 0

" Change leader to spacebar
let mapleader = " "

" For vim-taskwarrior
let g:task_rc_override = 'rc.defaultwidth=0'
